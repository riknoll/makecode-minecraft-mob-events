// Autogenerated code DO NOT EDIT
namespace mobEvents {
    /**
     * Sends a command to all cat entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Cat
    //% block="send cat event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/cat
    export function executeCatCommand(selector: EntitySelector, command: Cat): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:cat");
        executeMobEvent(selector, _Cat(command));
    }

    /**
     * Sends a command to all cave spider entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_CaveSpider
    //% block="send cave spider event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/cave-spider
    export function executeCaveSpiderCommand(selector: EntitySelector, command: CaveSpider): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:cave_spider");
        executeMobEvent(selector, _CaveSpider(command));
    }

    /**
     * Sends a command to all chicken entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Chicken
    //% block="send chicken event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/chicken
    export function executeChickenCommand(selector: EntitySelector, command: Chicken): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:chicken");
        executeMobEvent(selector, _Chicken(command));
    }

    /**
     * Sends a command to all command block minecart entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_CommandBlockMinecart
    //% block="send command block minecart event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/command-block-minecart
    export function executeCommandBlockMinecartCommand(selector: EntitySelector, command: CommandBlockMinecart): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:command_block_minecart");
        executeMobEvent(selector, _CommandBlockMinecart(command));
    }

    /**
     * Sends a command to all cow entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Cow
    //% block="send cow event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/cow
    export function executeCowCommand(selector: EntitySelector, command: Cow): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:cow");
        executeMobEvent(selector, _Cow(command));
    }

    /**
     * Sends a command to all creeper entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Creeper
    //% block="send creeper event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/creeper
    export function executeCreeperCommand(selector: EntitySelector, command: Creeper): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:creeper");
        executeMobEvent(selector, _Creeper(command));
    }

    /**
     * Sends a command to all donkey entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Donkey
    //% block="send donkey event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/donkey
    export function executeDonkeyCommand(selector: EntitySelector, command: Donkey): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:donkey");
        executeMobEvent(selector, _Donkey(command));
    }

    /**
     * Sends a command to all drowned entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Drowned
    //% block="send drowned event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/drowned
    export function executeDrownedCommand(selector: EntitySelector, command: Drowned): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:drowned");
        executeMobEvent(selector, _Drowned(command));
    }

    /**
     * Sends a command to all enderman entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Enderman
    //% block="send enderman event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/enderman
    export function executeEndermanCommand(selector: EntitySelector, command: Enderman): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:enderman");
        executeMobEvent(selector, _Enderman(command));
    }

    /**
     * Sends a command to all ender crystal entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_EnderCrystal
    //% block="send ender crystal event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/ender-crystal
    export function executeEnderCrystalCommand(selector: EntitySelector, command: EnderCrystal): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:ender_crystal");
        executeMobEvent(selector, _EnderCrystal(command));
    }

    /**
     * Sends a command to all ender dragon entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_EnderDragon
    //% block="send ender dragon event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/ender-dragon
    export function executeEnderDragonCommand(selector: EntitySelector, command: EnderDragon): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:ender_dragon");
        executeMobEvent(selector, _EnderDragon(command));
    }

    /**
     * Sends a command to all evocation illager entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_EvocationIllager
    //% block="send evocation illager event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/evocation-illager
    export function executeEvocationIllagerCommand(selector: EntitySelector, command: EvocationIllager): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:evocation_illager");
        executeMobEvent(selector, _EvocationIllager(command));
    }

    /**
     * Sends a command to all fireball entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Fireball
    //% block="send fireball event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/fireball
    export function executeFireballCommand(selector: EntitySelector, command: Fireball): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:fireball");
        executeMobEvent(selector, _Fireball(command));
    }

    /**
     * Sends a command to all fox entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Fox
    //% block="send fox event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/fox
    export function executeFoxCommand(selector: EntitySelector, command: Fox): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:fox");
        executeMobEvent(selector, _Fox(command));
    }

    /**
     * Sends a command to all guardian entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Guardian
    //% block="send guardian event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/guardian
    export function executeGuardianCommand(selector: EntitySelector, command: Guardian): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:guardian");
        executeMobEvent(selector, _Guardian(command));
    }

    /**
     * Sends a command to all hopper minecart entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_HopperMinecart
    //% block="send hopper minecart event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/hopper-minecart
    export function executeHopperMinecartCommand(selector: EntitySelector, command: HopperMinecart): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:hopper_minecart");
        executeMobEvent(selector, _HopperMinecart(command));
    }

    /**
     * Sends a command to all horse entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Horse
    //% block="send horse event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/horse
    export function executeHorseCommand(selector: EntitySelector, command: Horse): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:horse");
        executeMobEvent(selector, _Horse(command));
    }

    /**
     * Sends a command to all husk entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Husk
    //% block="send husk event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/husk
    export function executeHuskCommand(selector: EntitySelector, command: Husk): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:husk");
        executeMobEvent(selector, _Husk(command));
    }

    /**
     * Sends a command to all iron golem entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_IronGolem
    //% block="send iron golem event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/iron-golem
    export function executeIronGolemCommand(selector: EntitySelector, command: IronGolem): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:iron_golem");
        executeMobEvent(selector, _IronGolem(command));
    }

    /**
     * Sends a command to all llama entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Llama
    //% block="send llama event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/llama
    export function executeLlamaCommand(selector: EntitySelector, command: Llama): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:llama");
        executeMobEvent(selector, _Llama(command));
    }

    /**
     * Sends a command to all magma cube entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_MagmaCube
    //% block="send magma cube event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/magma-cube
    export function executeMagmaCubeCommand(selector: EntitySelector, command: MagmaCube): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:magma_cube");
        executeMobEvent(selector, _MagmaCube(command));
    }

    /**
     * Sends a command to all mooshroom entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Mooshroom
    //% block="send mooshroom event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/mooshroom
    export function executeMooshroomCommand(selector: EntitySelector, command: Mooshroom): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:mooshroom");
        executeMobEvent(selector, _Mooshroom(command));
    }

    /**
     * Sends a command to all mule entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Mule
    //% block="send mule event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/mule
    export function executeMuleCommand(selector: EntitySelector, command: Mule): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:mule");
        executeMobEvent(selector, _Mule(command));
    }

    /**
     * Sends a command to all ocelot entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Ocelot
    //% block="send ocelot event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/ocelot
    export function executeOcelotCommand(selector: EntitySelector, command: Ocelot): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:ocelot");
        executeMobEvent(selector, _Ocelot(command));
    }

    /**
     * Sends a command to all panda entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Panda
    //% block="send panda event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/panda
    export function executePandaCommand(selector: EntitySelector, command: Panda): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:panda");
        executeMobEvent(selector, _Panda(command));
    }

    /**
     * Sends a command to all parrot entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Parrot
    //% block="send parrot event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/parrot
    export function executeParrotCommand(selector: EntitySelector, command: Parrot): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:parrot");
        executeMobEvent(selector, _Parrot(command));
    }

    /**
     * Sends a command to all pig entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Pig
    //% block="send pig event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/pig
    export function executePigCommand(selector: EntitySelector, command: Pig): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:pig");
        executeMobEvent(selector, _Pig(command));
    }

    /**
     * Sends a command to all pillager entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Pillager
    //% block="send pillager event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/pillager
    export function executePillagerCommand(selector: EntitySelector, command: Pillager): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:pillager");
        executeMobEvent(selector, _Pillager(command));
    }

    /**
     * Sends a command to all player entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Player
    //% block="send player event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/player
    export function executePlayerCommand(selector: EntitySelector, command: Player): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:player");
        executeMobEvent(selector, _Player(command));
    }

    /**
     * Sends a command to all polar bear entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_PolarBear
    //% block="send polar bear event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/polar-bear
    export function executePolarBearCommand(selector: EntitySelector, command: PolarBear): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:polar_bear");
        executeMobEvent(selector, _PolarBear(command));
    }

    /**
     * Sends a command to all rabbit entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Rabbit
    //% block="send rabbit event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/rabbit
    export function executeRabbitCommand(selector: EntitySelector, command: Rabbit): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:rabbit");
        executeMobEvent(selector, _Rabbit(command));
    }

    /**
     * Sends a command to all ravager entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Ravager
    //% block="send ravager event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/ravager
    export function executeRavagerCommand(selector: EntitySelector, command: Ravager): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:ravager");
        executeMobEvent(selector, _Ravager(command));
    }

    /**
     * Sends a command to all sheep entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Sheep
    //% block="send sheep event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/sheep
    export function executeSheepCommand(selector: EntitySelector, command: Sheep): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:sheep");
        executeMobEvent(selector, _Sheep(command));
    }

    /**
     * Sends a command to all shulker entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Shulker
    //% block="send shulker event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/shulker
    export function executeShulkerCommand(selector: EntitySelector, command: Shulker): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:shulker");
        executeMobEvent(selector, _Shulker(command));
    }

    /**
     * Sends a command to all silverfish entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Silverfish
    //% block="send silverfish event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/silverfish
    export function executeSilverfishCommand(selector: EntitySelector, command: Silverfish): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:silverfish");
        executeMobEvent(selector, _Silverfish(command));
    }

    /**
     * Sends a command to all skeleton entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Skeleton
    //% block="send skeleton event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/skeleton
    export function executeSkeletonCommand(selector: EntitySelector, command: Skeleton): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:skeleton");
        executeMobEvent(selector, _Skeleton(command));
    }

    /**
     * Sends a command to all skeleton horse entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_SkeletonHorse
    //% block="send skeleton horse event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/skeleton-horse
    export function executeSkeletonHorseCommand(selector: EntitySelector, command: SkeletonHorse): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:skeleton_horse");
        executeMobEvent(selector, _SkeletonHorse(command));
    }

    /**
     * Sends a command to all slime entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Slime
    //% block="send slime event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/slime
    export function executeSlimeCommand(selector: EntitySelector, command: Slime): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:slime");
        executeMobEvent(selector, _Slime(command));
    }

    /**
     * Sends a command to all snow golem entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_SnowGolem
    //% block="send snow golem event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/snow-golem
    export function executeSnowGolemCommand(selector: EntitySelector, command: SnowGolem): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:snow_golem");
        executeMobEvent(selector, _SnowGolem(command));
    }

    /**
     * Sends a command to all spider entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Spider
    //% block="send spider event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/spider
    export function executeSpiderCommand(selector: EntitySelector, command: Spider): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:spider");
        executeMobEvent(selector, _Spider(command));
    }

    /**
     * Sends a command to all stray entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Stray
    //% block="send stray event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/stray
    export function executeStrayCommand(selector: EntitySelector, command: Stray): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:stray");
        executeMobEvent(selector, _Stray(command));
    }

    /**
     * Sends a command to all tnt minecart entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_TntMinecart
    //% block="send tnt minecart event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/tnt-minecart
    export function executeTntMinecartCommand(selector: EntitySelector, command: TntMinecart): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:tnt_minecart");
        executeMobEvent(selector, _TntMinecart(command));
    }

    /**
     * Sends a command to all tropicalfish entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Tropicalfish
    //% block="send tropicalfish event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/tropicalfish
    export function executeTropicalfishCommand(selector: EntitySelector, command: Tropicalfish): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:tropicalfish");
        executeMobEvent(selector, _Tropicalfish(command));
    }

    /**
     * Sends a command to all turtle entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Turtle
    //% block="send turtle event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/turtle
    export function executeTurtleCommand(selector: EntitySelector, command: Turtle): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:turtle");
        executeMobEvent(selector, _Turtle(command));
    }

    /**
     * Sends a command to all villager entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Villager
    //% block="send villager event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/villager
    export function executeVillagerCommand(selector: EntitySelector, command: Villager): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:villager_v2");
        executeMobEvent(selector, _Villager(command));
    }

    /**
     * Sends a command to all vindicator entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Vindicator
    //% block="send vindicator event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/vindicator
    export function executeVindicatorCommand(selector: EntitySelector, command: Vindicator): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:vindicator");
        executeMobEvent(selector, _Vindicator(command));
    }

    /**
     * Sends a command to all wandering trader entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_WanderingTrader
    //% block="send wandering trader event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/wandering-trader
    export function executeWanderingTraderCommand(selector: EntitySelector, command: WanderingTrader): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:wandering_trader");
        executeMobEvent(selector, _WanderingTrader(command));
    }

    /**
     * Sends a command to all witch entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Witch
    //% block="send witch event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/witch
    export function executeWitchCommand(selector: EntitySelector, command: Witch): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:witch");
        executeMobEvent(selector, _Witch(command));
    }

    /**
     * Sends a command to all wither skull entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_WitherSkull
    //% block="send wither skull event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/wither-skull
    export function executeWitherSkullCommand(selector: EntitySelector, command: WitherSkull): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:wither_skull");
        executeMobEvent(selector, _WitherSkull(command));
    }

    /**
     * Sends a command to all wither skull dangerous entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_WitherSkullDangerous
    //% block="send wither skull dangerous event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/wither-skull-dangerous
    export function executeWitherSkullDangerousCommand(selector: EntitySelector, command: WitherSkullDangerous): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:wither_skull_dangerous");
        executeMobEvent(selector, _WitherSkullDangerous(command));
    }

    /**
     * Sends a command to all wolf entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Wolf
    //% block="send wolf event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/wolf
    export function executeWolfCommand(selector: EntitySelector, command: Wolf): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:wolf");
        executeMobEvent(selector, _Wolf(command));
    }

    /**
     * Sends a command to all zombie entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_Zombie
    //% block="send zombie event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/zombie
    export function executeZombieCommand(selector: EntitySelector, command: Zombie): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:zombie");
        executeMobEvent(selector, _Zombie(command));
    }

    /**
     * Sends a command to all zombie horse entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_ZombieHorse
    //% block="send zombie horse event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/zombie-horse
    export function executeZombieHorseCommand(selector: EntitySelector, command: ZombieHorse): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:zombie_horse");
        executeMobEvent(selector, _ZombieHorse(command));
    }

    /**
     * Sends a command to all zombie pigman entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_ZombiePigman
    //% block="send zombie pigman event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/zombie-pigman
    export function executeZombiePigmanCommand(selector: EntitySelector, command: ZombiePigman): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:zombie_pigman");
        executeMobEvent(selector, _ZombiePigman(command));
    }

    /**
     * Sends a command to all zombie villager entities that are matched by the given selector.
     * This block uses EntitySelectors from this extension and not TargetSelectors
     * from the mobs category.
     *
     * @param selector An EntitySelector specifying which entities to send the command to
     * @param command The command to send to the selected entities
     *
     */
    //% blockId=mob_events_ZombieVillager
    //% block="send zombie villager event $command to $selector"
    //% selector.shadow=mob_events_create_selector
    //% help=github:makecode-minecraft-mob-events/docs/zombie-villager
    export function executeZombieVillagerCommand(selector: EntitySelector, command: ZombieVillager): void {
        selector._setRule(_EntitySelectorArgument.Type, "minecraft:zombie_villager_v2");
        executeMobEvent(selector, _ZombieVillager(command));
    }


    export enum Cat {
        //% block="transform into village cat"
        TransformIntoVillageCat,
        //% block="transform into midnight cat"
        TransformIntoMidnightCat,
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="become tame"
        BecomeTame,
    }

    export enum CaveSpider {
        //% block="become hostile"
        BecomeHostile,
        //% block="become neutral"
        BecomeNeutral,
        //% block="become angry"
        BecomeAngry,
        //% block="become calm"
        BecomeCalm,
    }

    export enum Chicken {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
    }

    export enum CommandBlockMinecart {
        //% block="command block activate"
        CommandBlockActivate,
        //% block="command block deactivate"
        CommandBlockDeactivate,
    }

    export enum Cow {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
    }

    export enum Creeper {
        //% block="start exploding forced"
        StartExplodingForced,
        //% block="stop exploding"
        StopExploding,
        //% block="become charged"
        BecomeCharged,
    }

    export enum Donkey {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="on tame"
        OnTame,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="put on saddlebags"
        PutOnSaddlebags,
        //% block="put on saddle"
        PutOnSaddle,
        //% block="take off saddle"
        TakeOffSaddle,
    }

    export enum Drowned {
        //% block="transform into baby"
        TransformIntoBaby,
    }

    export enum Enderman {
        //% block="become angry"
        BecomeAngry,
        //% block="become calm"
        BecomeCalm,
    }

    export enum EnderCrystal {
        //% block="explode"
        Explode,
    }

    export enum EnderDragon {
        //% block="start to land"
        StartToLand,
        //% block="start to fly"
        StartToFly,
        //% block="start death"
        StartDeath,
    }

    export enum EvocationIllager {
        //% block="become a raider"
        BecomeARaider,
    }

    export enum Fireball {
        //% block="explode"
        Explode,
    }

    export enum Fox {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="configure for thunderstorm"
        ConfigureForThunderstorm,
        //% block="configure for day"
        ConfigureForDay,
        //% block="configure for night"
        ConfigureForNight,
        //% block="configure for defending"
        ConfigureForDefending,
        //% block="configure for docile day"
        ConfigureForDocileDay,
        //% block="configure for docile night"
        ConfigureForDocileNight,
    }

    export enum Guardian {
        //% block="target too close"
        TargetTooClose,
        //% block="target far enough"
        TargetFarEnough,
    }

    export enum HopperMinecart {
        //% block="activate"
        Activate,
        //% block="deactivate"
        Deactivate,
    }

    export enum Horse {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="become tame"
        BecomeTame,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="put on saddle"
        PutOnSaddle,
        //% block="take off saddle"
        TakeOffSaddle,
        //% block="transform into white horse"
        TransformIntoWhiteHorse,
        //% block="transform into creamy horse"
        TransformIntoCreamyHorse,
        //% block="transform into chestnut horse"
        TransformIntoChestnutHorse,
        //% block="transform into brown horse"
        TransformIntoBrownHorse,
        //% block="transform into black horse"
        TransformIntoBlackHorse,
        //% block="transform into gray horse"
        TransformIntoGrayHorse,
        //% block="transform into darkbrown horse"
        TransformIntoDarkbrownHorse,
    }

    export enum Husk {
        //% block="start transforming into zombie"
        StartTransformingIntoZombie,
    }

    export enum IronGolem {
        //% block="become player golem"
        BecomePlayerGolem,
        //% block="become village golem"
        BecomeVillageGolem,
    }

    export enum Llama {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="from wandering trader"
        FromWanderingTrader,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="on tame"
        OnTame,
        //% block="join caravan"
        JoinCaravan,
        //% block="leave caravan"
        LeaveCaravan,
        //% block="become angry"
        BecomeAngry,
        //% block="become calm"
        BecomeCalm,
        //% block="put on saddlebags"
        PutOnSaddlebags,
    }

    export enum MagmaCube {
        //% block="become calm"
        BecomeCalm,
        //% block="become aggressive"
        BecomeAggressive,
    }

    export enum Mooshroom {
        //% block="transform into a cow"
        TransformIntoACow,
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
    }

    export enum Mule {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="become tame"
        BecomeTame,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="put on saddlebags"
        PutOnSaddlebags,
        //% block="put on saddle"
        PutOnSaddle,
        //% block="take off saddle"
        TakeOffSaddle,
    }

    export enum Ocelot {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into a wild baby"
        TransformIntoAWildBaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="become trusting"
        BecomeTrusting,
    }

    export enum Panda {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="become lazy"
        BecomeLazy,
        //% block="become worried"
        BecomeWorried,
        //% block="become playful"
        BecomePlayful,
        //% block="transform into a brown panda"
        TransformIntoABrownPanda,
        //% block="become weak"
        BecomeWeak,
        //% block="become aggressive"
        BecomeAggressive,
        //% block="become scared"
        BecomeScared,
        //% block="become angry"
        BecomeAngry,
        //% block="become calm"
        BecomeCalm,
    }

    export enum Parrot {
        //% block="become tame"
        BecomeTame,
    }

    export enum Pig {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="put on saddle"
        PutOnSaddle,
    }

    export enum Pillager {
        //% block="become a raider"
        BecomeARaider,
        //% block="promote to illager captain"
        PromoteToIllagerCaptain,
        //% block="promote to patrol captain"
        PromoteToPatrolCaptain,
    }

    export enum Player {
        //% block="gain bad omen"
        GainBadOmen,
        //% block="clear bad omen"
        ClearBadOmen,
        //% block="trigger raid"
        TriggerRaid,
        //% block="remove raid trigger"
        RemoveRaidTrigger,
    }

    export enum PolarBear {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="become calm"
        BecomeCalm,
        //% block="become angry"
        BecomeAngry,
        //% block="become scared"
        BecomeScared,
    }

    export enum Rabbit {
        //% block="transform into a desert rabbit"
        TransformIntoADesertRabbit,
        //% block="transform into a snow rabiit"
        TransformIntoASnowRabiit,
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
    }

    export enum Ravager {
        //% block="become a raider"
        BecomeARaider,
        //% block="spawn for raid with evoker rider"
        SpawnForRaidWithEvokerRider,
        //% block="spawn for raid with pillager rider"
        SpawnForRaidWithPillagerRider,
        //% block="gain pillager rider"
        GainPillagerRider,
        //% block="gain pillager captain rider"
        GainPillagerCaptainRider,
        //% block="gain vindicator rider"
        GainVindicatorRider,
        //% block="gain vindicator captain rider"
        GainVindicatorCaptainRider,
        //% block="become stunned"
        BecomeStunned,
        //% block="start roar"
        StartRoar,
        //% block="end roar"
        EndRoar,
    }

    export enum Sheep {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="on sheared"
        OnSheared,
        //% block="on eat block"
        OnEatBlock,
        //% block="wololo"
        Wololo,
    }

    export enum Shulker {
        //% block="turn purple"
        TurnPurple,
        //% block="turn black"
        TurnBlack,
        //% block="turn blue"
        TurnBlue,
        //% block="turn brown"
        TurnBrown,
        //% block="turn cyan"
        TurnCyan,
        //% block="turn gray"
        TurnGray,
        //% block="turn green"
        TurnGreen,
        //% block="turn light blue"
        TurnLightBlue,
        //% block="turn lime"
        TurnLime,
        //% block="turn magenta"
        TurnMagenta,
        //% block="turn orange"
        TurnOrange,
        //% block="turn pink"
        TurnPink,
        //% block="turn red"
        TurnRed,
        //% block="turn silver"
        TurnSilver,
        //% block="turn white"
        TurnWhite,
        //% block="turn yellow"
        TurnYellow,
    }

    export enum Silverfish {
        //% block="become angry"
        BecomeAngry,
        //% block="become calm"
        BecomeCalm,
    }

    export enum Skeleton {
        //% block="spring trap"
        SpringTrap,
    }

    export enum SkeletonHorse {
        //% block="set trap"
        SetTrap,
        //% block="spring trap"
        SpringTrap,
    }

    export enum Slime {
        //% block="become calm"
        BecomeCalm,
        //% block="become aggressive"
        BecomeAggressive,
    }

    export enum SnowGolem {
        //% block="remove pumpkin head"
        RemovePumpkinHead,
    }

    export enum Spider {
        //% block="become hostile"
        BecomeHostile,
        //% block="become neutral"
        BecomeNeutral,
        //% block="become angry"
        BecomeAngry,
        //% block="become calm"
        BecomeCalm,
    }

    export enum Stray {
        //% block="change to skeleton"
        ChangeToSkeleton,
    }

    export enum TntMinecart {
        //% block="become primed"
        BecomePrimed,
        //% block="explode"
        Explode,
    }

    export enum Tropicalfish {
        //% block="transform into anenonme"
        TransformIntoAnenonme,
        //% block="transform into black tang"
        TransformIntoBlackTang,
        //% block="transform into blue dory"
        TransformIntoBlueDory,
        //% block="transform into butterfly fish"
        TransformIntoButterflyFish,
        //% block="transform into cichlid"
        TransformIntoCichlid,
        //% block="transform into clownfish"
        TransformIntoClownfish,
        //% block="transform into cc betta"
        TransformIntoCcBetta,
        //% block="transform into dog fish"
        TransformIntoDogFish,
        //% block="transform into e red snapper"
        TransformIntoERedSnapper,
        //% block="transform into goat fish"
        TransformIntoGoatFish,
        //% block="transform into moorish idol"
        TransformIntoMoorishIdol,
        //% block="transform into ornate butterfly"
        TransformIntoOrnateButterfly,
        //% block="transform into parrot fish"
        TransformIntoParrotFish,
        //% block="transform into queen angel fish"
        TransformIntoQueenAngelFish,
        //% block="transform into red cichlid"
        TransformIntoRedCichlid,
        //% block="transform into red lipped benny"
        TransformIntoRedLippedBenny,
        //% block="transform into red snapper"
        TransformIntoRedSnapper,
        //% block="transform into threadfin"
        TransformIntoThreadfin,
        //% block="transform into tomato clown"
        TransformIntoTomatoClown,
        //% block="transform into triggerfish"
        TransformIntoTriggerfish,
        //% block="transform into yellow tang"
        TransformIntoYellowTang,
        //% block="transform into yellow tail parrot"
        TransformIntoYellowTailParrot,
    }

    export enum Turtle {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
    }

    export enum Villager {
        //% block="transform into a witch"
        TransformIntoAWitch,
        //% block="transform into a zombie"
        TransformIntoAZombie,
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="transform into a unskilled"
        TransformIntoAUnskilled,
        //% block="transform into a cleric"
        TransformIntoACleric,
        //% block="transform into a farmer"
        TransformIntoAFarmer,
        //% block="transform into a fisherman"
        TransformIntoAFisherman,
        //% block="transform into a fletcher"
        TransformIntoAFletcher,
        //% block="transform into a librarian"
        TransformIntoALibrarian,
        //% block="transform into a cartographer"
        TransformIntoACartographer,
        //% block="transform into a armorer"
        TransformIntoAArmorer,
        //% block="transform into a weaponsmith"
        TransformIntoAWeaponsmith,
        //% block="transform into a toolsmith"
        TransformIntoAToolsmith,
        //% block="transform into a butcher"
        TransformIntoAButcher,
        //% block="transform into a leatherworker"
        TransformIntoALeatherworker,
        //% block="transform into a shepherd"
        TransformIntoAShepherd,
        //% block="transform into a mason"
        TransformIntoAMason,
        //% block="schedule wander villager"
        ScheduleWanderVillager,
        //% block="schedule gather villager"
        ScheduleGatherVillager,
        //% block="schedule home villager"
        ScheduleHomeVillager,
        //% block="schedule bed villager"
        ScheduleBedVillager,
        //% block="schedule play villager"
        SchedulePlayVillager,
        //% block="schedule work pro villager"
        ScheduleWorkProVillager,
        //% block="schedule work farmer"
        ScheduleWorkFarmer,
        //% block="schedule work fisher"
        ScheduleWorkFisher,
        //% block="schedule work librarian"
        ScheduleWorkLibrarian,
        //% block="resupply trades"
        ResupplyTrades,
    }

    export enum Vindicator {
        //% block="become a patrol follower"
        BecomeAPatrolFollower,
        //% block="start attacking with axe"
        StartAttackingWithAxe,
        //% block="stop attacking with axe"
        StopAttackingWithAxe,
        //% block="become a raider"
        BecomeARaider,
        //% block="promote to illager captain"
        PromoteToIllagerCaptain,
        //% block="promote to patrol captain"
        PromoteToPatrolCaptain,
    }

    export enum WanderingTrader {
        //% block="start despawn"
        StartDespawn,
        //% block="become scared"
        BecomeScared,
        //% block="become calm"
        BecomeCalm,
    }

    export enum Witch {
        //% block="become a raider"
        BecomeARaider,
    }

    export enum WitherSkull {
        //% block="explode"
        Explode,
    }

    export enum WitherSkullDangerous {
        //% block="explode"
        Explode,
    }

    export enum Wolf {
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="become tame"
        BecomeTame,
        //% block="become angry"
        BecomeAngry,
        //% block="become calm"
        BecomeCalm,
    }

    export enum Zombie {
        //% block="transform into an adult"
        TransformIntoAnAdult,
        //% block="transform into a baby"
        TransformIntoABaby,
        //% block="start transforming into drowned"
        StartTransformingIntoDrowned,
    }

    export enum ZombieHorse {
        //% block="transform into an adult"
        TransformIntoAnAdult,
    }

    export enum ZombiePigman {
        //% block="become calm"
        BecomeCalm,
        //% block="become angry"
        BecomeAngry,
    }

    export enum ZombieVillager {
        //% block="become cleric"
        BecomeCleric,
    }


    function _Cat(id: Cat): string {
        switch (id) {
            case Cat.TransformIntoVillageCat: return "minecraft:spawn_from_village";
            case Cat.TransformIntoMidnightCat: return "minecraft:spawn_midnight_cat";
            case Cat.TransformIntoABaby: return "minecraft:entity_born";
            case Cat.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Cat.BecomeTame: return "minecraft:on_tame";
            default:
                player.errorMessage("Unknown Cat value");
                return undefined;
        }
    }

    function _CaveSpider(id: CaveSpider): string {
        switch (id) {
            case CaveSpider.BecomeHostile: return "minecraft:become_hostile";
            case CaveSpider.BecomeNeutral: return "minecraft:become_neutral";
            case CaveSpider.BecomeAngry: return "minecraft:become_angry";
            case CaveSpider.BecomeCalm: return "minecraft:on_calm";
            default:
                player.errorMessage("Unknown CaveSpider value");
                return undefined;
        }
    }

    function _Chicken(id: Chicken): string {
        switch (id) {
            case Chicken.TransformIntoABaby: return "minecraft:entity_born";
            case Chicken.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            default:
                player.errorMessage("Unknown Chicken value");
                return undefined;
        }
    }

    function _CommandBlockMinecart(id: CommandBlockMinecart): string {
        switch (id) {
            case CommandBlockMinecart.CommandBlockActivate: return "minecraft:command_block_activate";
            case CommandBlockMinecart.CommandBlockDeactivate: return "minecraft:command_block_deactivate";
            default:
                player.errorMessage("Unknown CommandBlockMinecart value");
                return undefined;
        }
    }

    function _Cow(id: Cow): string {
        switch (id) {
            case Cow.TransformIntoABaby: return "minecraft:entity_born";
            case Cow.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            default:
                player.errorMessage("Unknown Cow value");
                return undefined;
        }
    }

    function _Creeper(id: Creeper): string {
        switch (id) {
            case Creeper.StartExplodingForced: return "minecraft:start_exploding_forced";
            case Creeper.StopExploding: return "minecraft:stop_exploding";
            case Creeper.BecomeCharged: return "minecraft:become_charged";
            default:
                player.errorMessage("Unknown Creeper value");
                return undefined;
        }
    }

    function _Donkey(id: Donkey): string {
        switch (id) {
            case Donkey.TransformIntoABaby: return "minecraft:entity_born";
            case Donkey.OnTame: return "minecraft:on_tame";
            case Donkey.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Donkey.PutOnSaddlebags: return "minecraft:on_chest";
            case Donkey.PutOnSaddle: return "minecraft:donkey_saddled";
            case Donkey.TakeOffSaddle: return "minecraft:donkey_unsaddled";
            default:
                player.errorMessage("Unknown Donkey value");
                return undefined;
        }
    }

    function _Drowned(id: Drowned): string {
        switch (id) {
            case Drowned.TransformIntoBaby: return "minecraft:as_baby";
            default:
                player.errorMessage("Unknown Drowned value");
                return undefined;
        }
    }

    function _Enderman(id: Enderman): string {
        switch (id) {
            case Enderman.BecomeAngry: return "minecraft:become_angry";
            case Enderman.BecomeCalm: return "minecraft:on_calm";
            default:
                player.errorMessage("Unknown Enderman value");
                return undefined;
        }
    }

    function _EnderCrystal(id: EnderCrystal): string {
        switch (id) {
            case EnderCrystal.Explode: return "minecraft:crystal_explode";
            default:
                player.errorMessage("Unknown EnderCrystal value");
                return undefined;
        }
    }

    function _EnderDragon(id: EnderDragon): string {
        switch (id) {
            case EnderDragon.StartToLand: return "minecraft:start_land";
            case EnderDragon.StartToFly: return "minecraft:start_fly";
            case EnderDragon.StartDeath: return "minecraft:start_death";
            default:
                player.errorMessage("Unknown EnderDragon value");
                return undefined;
        }
    }

    function _EvocationIllager(id: EvocationIllager): string {
        switch (id) {
            case EvocationIllager.BecomeARaider: return "minecraft:spawn_for_raid";
            default:
                player.errorMessage("Unknown EvocationIllager value");
                return undefined;
        }
    }

    function _Fireball(id: Fireball): string {
        switch (id) {
            case Fireball.Explode: return "minecraft:explode";
            default:
                player.errorMessage("Unknown Fireball value");
                return undefined;
        }
    }

    function _Fox(id: Fox): string {
        switch (id) {
            case Fox.TransformIntoABaby: return "minecraft:entity_born";
            case Fox.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Fox.ConfigureForThunderstorm: return "minecraft:fox_configure_thunderstorm";
            case Fox.ConfigureForDay: return "minecraft:fox_configure_day";
            case Fox.ConfigureForNight: return "minecraft:fox_configure_night";
            case Fox.ConfigureForDefending: return "minecraft:fox_configure_defending";
            case Fox.ConfigureForDocileDay: return "minecraft:fox_configure_docile_day";
            case Fox.ConfigureForDocileNight: return "minecraft:fox_configure_docile_night";
            default:
                player.errorMessage("Unknown Fox value");
                return undefined;
        }
    }

    function _Guardian(id: Guardian): string {
        switch (id) {
            case Guardian.TargetTooClose: return "minecraft:target_too_close";
            case Guardian.TargetFarEnough: return "minecraft:target_far_enough";
            default:
                player.errorMessage("Unknown Guardian value");
                return undefined;
        }
    }

    function _HopperMinecart(id: HopperMinecart): string {
        switch (id) {
            case HopperMinecart.Activate: return "minecraft:hopper_activate";
            case HopperMinecart.Deactivate: return "minecraft:hopper_deactivate";
            default:
                player.errorMessage("Unknown HopperMinecart value");
                return undefined;
        }
    }

    function _Horse(id: Horse): string {
        switch (id) {
            case Horse.TransformIntoABaby: return "minecraft:entity_born";
            case Horse.BecomeTame: return "minecraft:on_tame";
            case Horse.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Horse.PutOnSaddle: return "minecraft:horse_saddled";
            case Horse.TakeOffSaddle: return "minecraft:horse_unsaddled";
            case Horse.TransformIntoWhiteHorse: return "minecraft:make_white";
            case Horse.TransformIntoCreamyHorse: return "minecraft:make_creamy";
            case Horse.TransformIntoChestnutHorse: return "minecraft:make_chestnut";
            case Horse.TransformIntoBrownHorse: return "minecraft:make_brown";
            case Horse.TransformIntoBlackHorse: return "minecraft:make_black";
            case Horse.TransformIntoGrayHorse: return "minecraft:make_gray";
            case Horse.TransformIntoDarkbrownHorse: return "minecraft:make_darkbrown";
            default:
                player.errorMessage("Unknown Horse value");
                return undefined;
        }
    }

    function _Husk(id: Husk): string {
        switch (id) {
            case Husk.StartTransformingIntoZombie: return "minecraft:convert_to_zombie";
            default:
                player.errorMessage("Unknown Husk value");
                return undefined;
        }
    }

    function _IronGolem(id: IronGolem): string {
        switch (id) {
            case IronGolem.BecomePlayerGolem: return "minecraft:from_player";
            case IronGolem.BecomeVillageGolem: return "minecraft:from_village";
            default:
                player.errorMessage("Unknown IronGolem value");
                return undefined;
        }
    }

    function _Llama(id: Llama): string {
        switch (id) {
            case Llama.TransformIntoABaby: return "minecraft:entity_born";
            case Llama.FromWanderingTrader: return "minecraft:from_wandering_trader";
            case Llama.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Llama.OnTame: return "minecraft:on_tame";
            case Llama.JoinCaravan: return "minecraft:join_caravan";
            case Llama.LeaveCaravan: return "minecraft:leave_caravan";
            case Llama.BecomeAngry: return "minecraft:become_angry";
            case Llama.BecomeCalm: return "minecraft:on_calm";
            case Llama.PutOnSaddlebags: return "minecraft:on_chest";
            default:
                player.errorMessage("Unknown Llama value");
                return undefined;
        }
    }

    function _MagmaCube(id: MagmaCube): string {
        switch (id) {
            case MagmaCube.BecomeCalm: return "minecraft:become_calm";
            case MagmaCube.BecomeAggressive: return "minecraft:become_aggressive";
            default:
                player.errorMessage("Unknown MagmaCube value");
                return undefined;
        }
    }

    function _Mooshroom(id: Mooshroom): string {
        switch (id) {
            case Mooshroom.TransformIntoACow: return "become_cow";
            case Mooshroom.TransformIntoABaby: return "minecraft:entity_born";
            case Mooshroom.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            default:
                player.errorMessage("Unknown Mooshroom value");
                return undefined;
        }
    }

    function _Mule(id: Mule): string {
        switch (id) {
            case Mule.TransformIntoABaby: return "minecraft:entity_born";
            case Mule.BecomeTame: return "minecraft:on_tame";
            case Mule.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Mule.PutOnSaddlebags: return "minecraft:on_chest";
            case Mule.PutOnSaddle: return "minecraft:mule_saddled";
            case Mule.TakeOffSaddle: return "minecraft:mule_unsaddled";
            default:
                player.errorMessage("Unknown Mule value");
                return undefined;
        }
    }

    function _Ocelot(id: Ocelot): string {
        switch (id) {
            case Ocelot.TransformIntoABaby: return "minecraft:entity_born";
            case Ocelot.TransformIntoAWildBaby: return "minecraft:entity_born_wild";
            case Ocelot.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Ocelot.BecomeTrusting: return "minecraft:on_trust";
            default:
                player.errorMessage("Unknown Ocelot value");
                return undefined;
        }
    }

    function _Panda(id: Panda): string {
        switch (id) {
            case Panda.TransformIntoABaby: return "minecraft:entity_born";
            case Panda.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Panda.BecomeLazy: return "minecraft:panda_lazy";
            case Panda.BecomeWorried: return "minecraft:panda_worried";
            case Panda.BecomePlayful: return "minecraft:panda_playful";
            case Panda.TransformIntoABrownPanda: return "minecraft:panda_brown";
            case Panda.BecomeWeak: return "minecraft:panda_weak";
            case Panda.BecomeAggressive: return "minecraft:panda_aggressive";
            case Panda.BecomeScared: return "minecraft:on_scared";
            case Panda.BecomeAngry: return "minecraft:become_angry";
            case Panda.BecomeCalm: return "minecraft:on_calm";
            default:
                player.errorMessage("Unknown Panda value");
                return undefined;
        }
    }

    function _Parrot(id: Parrot): string {
        switch (id) {
            case Parrot.BecomeTame: return "minecraft:on_tame";
            default:
                player.errorMessage("Unknown Parrot value");
                return undefined;
        }
    }

    function _Pig(id: Pig): string {
        switch (id) {
            case Pig.TransformIntoABaby: return "minecraft:entity_born";
            case Pig.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Pig.PutOnSaddle: return "minecraft:on_saddled";
            default:
                player.errorMessage("Unknown Pig value");
                return undefined;
        }
    }

    function _Pillager(id: Pillager): string {
        switch (id) {
            case Pillager.BecomeARaider: return "minecraft:spawn_for_raid";
            case Pillager.PromoteToIllagerCaptain: return "minecraft:promote_to_illager_captain";
            case Pillager.PromoteToPatrolCaptain: return "minecraft:promote_to_patrol_captain";
            default:
                player.errorMessage("Unknown Pillager value");
                return undefined;
        }
    }

    function _Player(id: Player): string {
        switch (id) {
            case Player.GainBadOmen: return "minecraft:gain_bad_omen";
            case Player.ClearBadOmen: return "minecraft:clear_add_bad_omen";
            case Player.TriggerRaid: return "minecraft:trigger_raid";
            case Player.RemoveRaidTrigger: return "minecraft:remove_raid_trigger";
            default:
                player.errorMessage("Unknown Player value");
                return undefined;
        }
    }

    function _PolarBear(id: PolarBear): string {
        switch (id) {
            case PolarBear.TransformIntoABaby: return "minecraft:entity_born";
            case PolarBear.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case PolarBear.BecomeCalm: return "minecraft:on_calm";
            case PolarBear.BecomeAngry: return "minecraft:on_anger";
            case PolarBear.BecomeScared: return "minecraft:on_scared";
            default:
                player.errorMessage("Unknown PolarBear value");
                return undefined;
        }
    }

    function _Rabbit(id: Rabbit): string {
        switch (id) {
            case Rabbit.TransformIntoADesertRabbit: return "in_desert";
            case Rabbit.TransformIntoASnowRabiit: return "in_snow";
            case Rabbit.TransformIntoABaby: return "minecraft:entity_born";
            case Rabbit.TransformIntoAnAdult: return "grow_up";
            default:
                player.errorMessage("Unknown Rabbit value");
                return undefined;
        }
    }

    function _Ravager(id: Ravager): string {
        switch (id) {
            case Ravager.BecomeARaider: return "minecraft:spawn_for_raid";
            case Ravager.SpawnForRaidWithEvokerRider: return "minecraft:spawn_for_raid_with_evoker_rider";
            case Ravager.SpawnForRaidWithPillagerRider: return "minecraft:spawn_for_raid_with_pillager_rider";
            case Ravager.GainPillagerRider: return "minecraft:spawn_with_pillager_rider";
            case Ravager.GainPillagerCaptainRider: return "minecraft:spawn_with_pillager_captain_rider";
            case Ravager.GainVindicatorRider: return "minecraft:spawn_with_vindicator_rider";
            case Ravager.GainVindicatorCaptainRider: return "minecraft:spawn_with_vindicator_captain_rider";
            case Ravager.BecomeStunned: return "minecraft:become_stunned";
            case Ravager.StartRoar: return "minecraft:start_roar";
            case Ravager.EndRoar: return "minecraft:end_roar";
            default:
                player.errorMessage("Unknown Ravager value");
                return undefined;
        }
    }

    function _Sheep(id: Sheep): string {
        switch (id) {
            case Sheep.TransformIntoABaby: return "minecraft:entity_born";
            case Sheep.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Sheep.OnSheared: return "minecraft:on_sheared";
            case Sheep.OnEatBlock: return "minecraft:on_eat_block";
            case Sheep.Wololo: return "wololo";
            default:
                player.errorMessage("Unknown Sheep value");
                return undefined;
        }
    }

    function _Shulker(id: Shulker): string {
        switch (id) {
            case Shulker.TurnPurple: return "minecraft:turn_purple";
            case Shulker.TurnBlack: return "minecraft:turn_black";
            case Shulker.TurnBlue: return "minecraft:turn_blue";
            case Shulker.TurnBrown: return "minecraft:turn_brown";
            case Shulker.TurnCyan: return "minecraft:turn_cyan";
            case Shulker.TurnGray: return "minecraft:turn_gray";
            case Shulker.TurnGreen: return "minecraft:turn_green";
            case Shulker.TurnLightBlue: return "minecraft:turn_light_blue";
            case Shulker.TurnLime: return "minecraft:turn_lime";
            case Shulker.TurnMagenta: return "minecraft:turn_magenta";
            case Shulker.TurnOrange: return "minecraft:turn_orange";
            case Shulker.TurnPink: return "minecraft:turn_pink";
            case Shulker.TurnRed: return "minecraft:turn_red";
            case Shulker.TurnSilver: return "minecraft:turn_silver";
            case Shulker.TurnWhite: return "minecraft:turn_white";
            case Shulker.TurnYellow: return "minecraft:turn_yellow";
            default:
                player.errorMessage("Unknown Shulker value");
                return undefined;
        }
    }

    function _Silverfish(id: Silverfish): string {
        switch (id) {
            case Silverfish.BecomeAngry: return "minecraft:become_angry";
            case Silverfish.BecomeCalm: return "minecraft:on_calm";
            default:
                player.errorMessage("Unknown Silverfish value");
                return undefined;
        }
    }

    function _Skeleton(id: Skeleton): string {
        switch (id) {
            case Skeleton.SpringTrap: return "minecraft:spring_trap";
            default:
                player.errorMessage("Unknown Skeleton value");
                return undefined;
        }
    }

    function _SkeletonHorse(id: SkeletonHorse): string {
        switch (id) {
            case SkeletonHorse.SetTrap: return "minecraft:set_trap";
            case SkeletonHorse.SpringTrap: return "minecraft:spring_trap";
            default:
                player.errorMessage("Unknown SkeletonHorse value");
                return undefined;
        }
    }

    function _Slime(id: Slime): string {
        switch (id) {
            case Slime.BecomeCalm: return "minecraft:become_calm";
            case Slime.BecomeAggressive: return "minecraft:become_aggressive";
            default:
                player.errorMessage("Unknown Slime value");
                return undefined;
        }
    }

    function _SnowGolem(id: SnowGolem): string {
        switch (id) {
            case SnowGolem.RemovePumpkinHead: return "minecraft:on_sheared";
            default:
                player.errorMessage("Unknown SnowGolem value");
                return undefined;
        }
    }

    function _Spider(id: Spider): string {
        switch (id) {
            case Spider.BecomeHostile: return "minecraft:become_hostile";
            case Spider.BecomeNeutral: return "minecraft:become_neutral";
            case Spider.BecomeAngry: return "minecraft:become_angry";
            case Spider.BecomeCalm: return "minecraft:become_calm";
            default:
                player.errorMessage("Unknown Spider value");
                return undefined;
        }
    }

    function _Stray(id: Stray): string {
        switch (id) {
            case Stray.ChangeToSkeleton: return "transform into skeleton";
            default:
                player.errorMessage("Unknown Stray value");
                return undefined;
        }
    }

    function _TntMinecart(id: TntMinecart): string {
        switch (id) {
            case TntMinecart.BecomePrimed: return "minecraft:on_prime";
            case TntMinecart.Explode: return "minecraft:on_instant_prime";
            default:
                player.errorMessage("Unknown TntMinecart value");
                return undefined;
        }
    }

    function _Tropicalfish(id: Tropicalfish): string {
        switch (id) {
            case Tropicalfish.TransformIntoAnenonme: return "minecraft:become_anenonme";
            case Tropicalfish.TransformIntoBlackTang: return "minecraft:become_black_tang";
            case Tropicalfish.TransformIntoBlueDory: return "minecraft:become_blue_dory";
            case Tropicalfish.TransformIntoButterflyFish: return "minecraft:become_butterfly_fish";
            case Tropicalfish.TransformIntoCichlid: return "minecraft:become_cichlid";
            case Tropicalfish.TransformIntoClownfish: return "minecraft:become_clownfish";
            case Tropicalfish.TransformIntoCcBetta: return "minecraft:become_cc_betta";
            case Tropicalfish.TransformIntoDogFish: return "minecraft:become_dog_fish";
            case Tropicalfish.TransformIntoERedSnapper: return "minecraft:become_e_red_snapper";
            case Tropicalfish.TransformIntoGoatFish: return "minecraft:become_goat_fish";
            case Tropicalfish.TransformIntoMoorishIdol: return "minecraft:become_moorish_idol";
            case Tropicalfish.TransformIntoOrnateButterfly: return "minecraft:become_ornate_butterfly";
            case Tropicalfish.TransformIntoParrotFish: return "minecraft:become_parrot_fish";
            case Tropicalfish.TransformIntoQueenAngelFish: return "minecraft:become_queen_angel_fish";
            case Tropicalfish.TransformIntoRedCichlid: return "minecraft:become_red_cichlid";
            case Tropicalfish.TransformIntoRedLippedBenny: return "minecraft:become_red_lipped_benny";
            case Tropicalfish.TransformIntoRedSnapper: return "minecraft:become_red_snapper";
            case Tropicalfish.TransformIntoThreadfin: return "minecraft:become_threadfin";
            case Tropicalfish.TransformIntoTomatoClown: return "minecraft:become_tomato_clown";
            case Tropicalfish.TransformIntoTriggerfish: return "minecraft:become_triggerfish";
            case Tropicalfish.TransformIntoYellowTang: return "minecraft:become_yellow_tang";
            case Tropicalfish.TransformIntoYellowTailParrot: return "minecraft:become_yellow_tail_parrot";
            default:
                player.errorMessage("Unknown Tropicalfish value");
                return undefined;
        }
    }

    function _Turtle(id: Turtle): string {
        switch (id) {
            case Turtle.TransformIntoABaby: return "minecraft:entity_born";
            case Turtle.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            default:
                player.errorMessage("Unknown Turtle value");
                return undefined;
        }
    }

    function _Villager(id: Villager): string {
        switch (id) {
            case Villager.TransformIntoAWitch: return "become_witch";
            case Villager.TransformIntoAZombie: return "become_zombie";
            case Villager.TransformIntoABaby: return "minecraft:entity_born";
            case Villager.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Villager.TransformIntoAUnskilled: return "minecraft:become_unskilled";
            case Villager.TransformIntoACleric: return "minecraft:become_cleric";
            case Villager.TransformIntoAFarmer: return "minecraft:become_farmer";
            case Villager.TransformIntoAFisherman: return "minecraft:become_fisherman";
            case Villager.TransformIntoAFletcher: return "minecraft:become_fletcher";
            case Villager.TransformIntoALibrarian: return "minecraft:become_librarian";
            case Villager.TransformIntoACartographer: return "minecraft:become_cartographer";
            case Villager.TransformIntoAArmorer: return "minecraft:become_armorer";
            case Villager.TransformIntoAWeaponsmith: return "minecraft:become_weaponsmith";
            case Villager.TransformIntoAToolsmith: return "minecraft:become_toolsmith";
            case Villager.TransformIntoAButcher: return "minecraft:become_butcher";
            case Villager.TransformIntoALeatherworker: return "minecraft:become_leatherworker";
            case Villager.TransformIntoAShepherd: return "minecraft:become_sheperd";
            case Villager.TransformIntoAMason: return "minecraft:become_mason";
            case Villager.ScheduleWanderVillager: return "minecraft:schedule_wander_villager";
            case Villager.ScheduleGatherVillager: return "minecraft:schedule_gather_villager";
            case Villager.ScheduleHomeVillager: return "minecraft:schedule_home_villager";
            case Villager.ScheduleBedVillager: return "minecraft:schedule_bed_villager";
            case Villager.SchedulePlayVillager: return "minecraft:schedule_play_villager";
            case Villager.ScheduleWorkProVillager: return "minecraft:schedule_work_pro_villager";
            case Villager.ScheduleWorkFarmer: return "minecraft:schedule_work_farmer";
            case Villager.ScheduleWorkFisher: return "minecraft:schedule_work_fisher";
            case Villager.ScheduleWorkLibrarian: return "minecraft:schedule_work_librarian";
            case Villager.ResupplyTrades: return "minecraft:resupply_trades";
            default:
                player.errorMessage("Unknown Villager value");
                return undefined;
        }
    }

    function _Vindicator(id: Vindicator): string {
        switch (id) {
            case Vindicator.BecomeAPatrolFollower: return "minecraft:spawn_as_patrol_follower";
            case Vindicator.StartAttackingWithAxe: return "minecraft:become_aggro";
            case Vindicator.StopAttackingWithAxe: return "minecraft:stop_aggro";
            case Vindicator.BecomeARaider: return "minecraft:spawn_for_raid";
            case Vindicator.PromoteToIllagerCaptain: return "minecraft:promote_to_illager_captain";
            case Vindicator.PromoteToPatrolCaptain: return "minecraft:promote_to_patrol_captain";
            default:
                player.errorMessage("Unknown Vindicator value");
                return undefined;
        }
    }

    function _WanderingTrader(id: WanderingTrader): string {
        switch (id) {
            case WanderingTrader.StartDespawn: return "minecraft:start_despawn";
            case WanderingTrader.BecomeScared: return "minecraft:become_scared";
            case WanderingTrader.BecomeCalm: return "minecraft:become_calm";
            default:
                player.errorMessage("Unknown WanderingTrader value");
                return undefined;
        }
    }

    function _Witch(id: Witch): string {
        switch (id) {
            case Witch.BecomeARaider: return "minecraft:spawn_for_raid";
            default:
                player.errorMessage("Unknown Witch value");
                return undefined;
        }
    }

    function _WitherSkull(id: WitherSkull): string {
        switch (id) {
            case WitherSkull.Explode: return "minecraft:explode";
            default:
                player.errorMessage("Unknown WitherSkull value");
                return undefined;
        }
    }

    function _WitherSkullDangerous(id: WitherSkullDangerous): string {
        switch (id) {
            case WitherSkullDangerous.Explode: return "minecraft:explode";
            default:
                player.errorMessage("Unknown WitherSkullDangerous value");
                return undefined;
        }
    }

    function _Wolf(id: Wolf): string {
        switch (id) {
            case Wolf.TransformIntoABaby: return "minecraft:entity_born";
            case Wolf.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            case Wolf.BecomeTame: return "minecraft:on_tame";
            case Wolf.BecomeAngry: return "minecraft:become_angry";
            case Wolf.BecomeCalm: return "minecraft:on_calm";
            default:
                player.errorMessage("Unknown Wolf value");
                return undefined;
        }
    }

    function _Zombie(id: Zombie): string {
        switch (id) {
            case Zombie.TransformIntoAnAdult: return "minecraft:as_adult";
            case Zombie.TransformIntoABaby: return "minecraft:as_baby";
            case Zombie.StartTransformingIntoDrowned: return "minecraft:convert_to_drowned";
            default:
                player.errorMessage("Unknown Zombie value");
                return undefined;
        }
    }

    function _ZombieHorse(id: ZombieHorse): string {
        switch (id) {
            case ZombieHorse.TransformIntoAnAdult: return "minecraft:ageable_grow_up";
            default:
                player.errorMessage("Unknown ZombieHorse value");
                return undefined;
        }
    }

    function _ZombiePigman(id: ZombiePigman): string {
        switch (id) {
            case ZombiePigman.BecomeCalm: return "minecraft:on_calm";
            case ZombiePigman.BecomeAngry: return "minecraft:become_angry";
            default:
                player.errorMessage("Unknown ZombiePigman value");
                return undefined;
        }
    }

    function _ZombieVillager(id: ZombieVillager): string {
        switch (id) {
            case ZombieVillager.BecomeCleric: return "minecraft:become_cleric";
            default:
                player.errorMessage("Unknown ZombieVillager value");
                return undefined;
        }
    }


}
// Autogenerated code DO NOT EDIT
